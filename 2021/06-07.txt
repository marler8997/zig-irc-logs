1623028289
daurnimator!~daurnimat@vultr.daurnimator.com
kiedtl: you can use ArrayListUnmanaged

1623030721
kiedtl!~kiedtl@kisslinux/kiedtl
daurnimator, Unless I'm mistaken with that I'd have to pass an allocator for each method call, no? What I'd want is something like 'var list = List(Foo, <size>)' and from then onwards I don't need to pass in any kind of allocator at all

1623030874
squeek502!~squeek502@user/squeek502
isn't that just a slice?

1623031102
squeek502!~squeek502@user/squeek502
there's also FixedBufferStream if you want to use writer/reader interface

1623032014
daurnimator!~daurnimat@vultr.daurnimator.com
kiedtl: you don't though; see e.g. appendAssumeCapacity

1623032099
daurnimator!~daurnimat@vultr.daurnimator.com
kiedtl: e.g. `var yourlist = ArrayListUnmanaged(Foo){.items = your_buffer[0..0], .capacity = your_buffer.len};`

1623032181
ifreund!~ifreund@user/ifreund
that doesn't help, you'd still need to pass an allocator to append anything 

1623032242
ifreund!~ifreund@user/ifreund
if you want an array list like API that is backed by a fixed size array instead of dynamically growing I see two options: use a fixed buffer allocator or write your own simple datastructure

1623032339
daurnimator!~daurnimat@vultr.daurnimator.com
ifreund: `yourlist.appendAssumeCapacity` exists

1623032344
daurnimator!~daurnimat@vultr.daurnimator.com
which doesn't need an allocator

1623032366
daurnimator!~daurnimat@vultr.daurnimator.com
and if you *aren't* assuming capacity, then the premise of "a fixed-width buffer underneath" is invalid

1623032456
ifreund!~ifreund@user/ifreund
daurnimator: then you don't get an error when your buffer is full

1623032488
ifreund!~ifreund@user/ifreund
which means you have to manually check if the capacity is sufficent before calling appendAssumeCapacity()

1623032499
ifreund!~ifreund@user/ifreund
which is a horrible, error-prone way to do things

1623033562
daurnimator!~daurnimat@vultr.daurnimator.com
in that case you can pass the null allocator... that's still around somewhere right?

1623033568
daurnimator!~daurnimat@vultr.daurnimator.com
I can't see it in heap.zig

1623033608
daurnimator!~daurnimat@vultr.daurnimator.com
but I think such a situation is rare... usually if you have a fixed size backing buffer its because you know e.g. the length has a maximum from elsewhere

1623033644
daurnimator!~daurnimat@vultr.daurnimator.com
e.g. you know there is max 255 elements possible as the protocol stores N-items in a u8.

1623045128
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
does anybody know why the next function in https://github.com/fengb/zCord/blob/master/src/json/path.zig wouldn't be iterable with "while (try someTokenizer.next()) |it|"? I keep getting "expected optional type, found FixToken"...but the return type of next() is !?FixToken? I thought that while would work

1623045318
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
sorry PathToken it is called, I guess

1623045617
ifreund!~ifreund@user/ifreund
wilsonk: that should work, could you paste your code somewhere?

1623046661
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
ifreund: it is literally just trying the 'while' clause down in the 'test PathToken' section of that file...

1623046706
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
so instead of just calling iter.next() three times...I just replace with the while clause and still get that error above

1623046907
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
oh, nevermind I got it ... I was still trying to unwrap the iterator lower down in the example and the caret was pointing to the 'while'...but I should have paid more attention to the second caret in the error.  My bad, sorry to bother

1623046956
ifreund!~ifreund@user/ifreund
no worries!

1623046979
ifreund!~ifreund@user/ifreund
I was guessing it was something like that :D

1623063900
kiedtl!~kiedtl@kisslinux/kiedtl
is there a way to force zig fmt to keep arguments to a function on each line (fn(a,\n b,\n c))... or do I have to disable zig fmt on those lines?

1623063997
ikskuh!~xq@2a0d:5940:6:163::ad7e
foo(a,b,c,)

1623064797
kiedtl!~kiedtl@kisslinux/kiedtl
ah

1623066329
z_is_stimky!~quassel@109.70.144.142
what ould be the most cross platorm way to stop this loop on sigkill/int/whatever https://github.com/purringChaos/PacketProxy/blob/77280ed74f074bf47d24201165fa2c99b3d37a0e/src/main.zig#L63

1623066397
z_is_stimky!~quassel@109.70.144.142
asking this here because i cant share a single screenshot in the discord without getting insulted

1623066458
z_is_stimky!~quassel@109.70.144.142
ikskuh: thanks 4 that, nice to kno

1623066472
z_is_stimky!~quassel@109.70.144.142
i always keep orgetting how to make zig ormat my code nicely lol

1623066475
ikskuh!~xq@2a0d:5940:6:163::ad7e
why sharing screenshots when you can share code via zigbin.io or github? ;)

1623066490
ikskuh!~xq@2a0d:5940:6:163::ad7e
sharing screenshots is seriously the worst case for everyone except you

1623066547
z_is_stimky!~quassel@109.70.144.142
50x quicker to screenshot

1623066564
z_is_stimky!~quassel@109.70.144.142
esp on my slow as hck laptop

1623066577
z_is_stimky!~quassel@109.70.144.142
having to interact with the web whilst doing code is a pain

1623066587
z_is_stimky!~quassel@109.70.144.142
constantly swapping

1623066600
z_is_stimky!~quassel@109.70.144.142
at least im not sending photos taken by my phone

1623066648
ikskuh!~xq@2a0d:5940:6:163::ad7e
even then: it's really rude to ask for help and posting a screenshot of your code

1623066658
ikskuh!~xq@2a0d:5940:6:163::ad7e
you're forcing everyone else to *type* that code

1623066663
ikskuh!~xq@2a0d:5940:6:163::ad7e
if they want to help you

1623066694
z_is_stimky!~quassel@109.70.144.142
i send the actual code when people need to test it

1623066708
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can also just send the code always

1623066709
z_is_stimky!~quassel@109.70.144.142
i send screenshots when im just saying, "hi whats best way to do this"

1623066711
z_is_stimky!~quassel@109.70.144.142
ya

1623066713
z_is_stimky!~quassel@109.70.144.142
ik

1623066713
ikskuh!~xq@2a0d:5940:6:163::ad7e
discord will auto-convert it to a file now

1623066719
z_is_stimky!~quassel@109.70.144.142
i dont want to argue about this any longer lol

1623066721
z_is_stimky!~quassel@109.70.144.142
so shush

1623066722
z_is_stimky!~quassel@109.70.144.142
meow

1623066851
z_is_stimky!~quassel@109.70.144.142
so anyway, best way to listen or sigint/kill in this code?

1623066864
z_is_stimky!~quassel@109.70.144.142
needs to work on windows as well

1623067413
Piraty!~irc@user/piraty
any notable differences to hare other than "by DDV (tm)" ?

1623067733
luuk!~luuk@user/luuk
Horrible style guide /s

1623067792
luuk!~luuk@user/luuk
Jokes aside, it seems their OOM strategy is considerably different: https://harelang.org/blog/2021-04-28-oom-strategies/

1623069831
daurnimator!~daurnimat@vultr.daurnimator.com
curious. its as if you did `catch |err| switch(err) { error.OutOfMemory => @panic("OOM"), else return err }` all the time

1623070997
kiedtl!~kiedtl@kisslinux/kiedtl
daurnimator: I was thinking of what's essentially a []?T with a counter to append to the next available space, panicking if it runs out of space (the caller should ensure that the buffer size is large enough)

1623071008
kiedtl!~kiedtl@kisslinux/kiedtl
s/[]?T/[]T/

1623075032
crr!cren@tilde.team
how do I decide which allocator to use as a child allocator for arena allocator?

1623075126
crr!cren@tilde.team
in fact, what does the choice of child allocator change?

1623075445
luuk!~luuk@user/luuk
Depends on your use case. If you, for instance, have an embedded device, you may want to back it with a FixedBufferAllocator

1623075462
luuk!~luuk@user/luuk
Since there's no OS to ask for memory

1623076239
tributarian!sid381145@brockwell.irccloud.com
Are there some good model codebases in zig that I can read to help me learn?

1623076287
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ACTION wonders if andrew likes pendulum

1623076292
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
tributarian std lib, zls

1623076342
tributarian!sid381145@brockwell.irccloud.com
haze: Thanks

1623076367
luuk!~luuk@user/luuk
I think you can learn a lot from the self-hosted compiler. 'River' is another great option that also provides great examples of how to deal with C in Zig.

1623076828
tributarian!sid381145@brockwell.irccloud.com
luuk: For the self-hosted compiler, would I start here: https://github.com/ziglang/zig/blob/master/src/main.zig

1623076830
daurnimator!~daurnimat@vultr.daurnimator.com
haze: the band?

1623076895
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yes

1623076926
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
holy shit those options tributarian 

1623076948
z_is_stimky!~quassel@109.70.144.142
frmdstryr: merge my PR

1623077213
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
have u considered asking nicely

1623077260
tributarian!sid381145@brockwell.irccloud.com
haze: Yes, that should keep me busy for a while. I haven't spent a lot of time in lower level languages so there is a lot of new ground to cover.

1623077274
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
youll get the hang of it

1623077294
z_is_stimky!~quassel@109.70.144.142
haze: me?

1623077308
luuk!~luuk@user/luuk
tributarian: Files like Sema.zig, Compilation.zig, Module.zig have great 'patterns'. They may perhaps be quite a big step to handle. Perhaps the standard library is a better starting point as they're more modular and don't really depend on the entire architecture hehe

1623077326
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yes kitteh

1623077400
z_is_stimky!~quassel@109.70.144.142
lol

1623077482
companion_cube!~simon@user/companion-cube
https://github.com/marnix/zigmmverify amazing, there's an intersection of 2 niche communities

1623077544
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
a language just recently got their color changed on github

1623077549
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i wonder if we could get the official zig color now

1623077576
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
kotlin i think it was

1623077626
luuk!~luuk@user/luuk
Oh wow, it's purple now :o

1623077874
earnestly!~earnest@user/earnestly
> https://github.com/ziglang/zig/search?l=zig still orange here

1623077906
earnestly!~earnest@user/earnestly
Oh you might be meaning kotlin

1623077924
luuk!~luuk@user/luuk
Yes sorry, I meant Kotlin

1623080076
crr!cren@tilde.team
I'm getting a segfault trying to compile this program, would someone mind taking a look?

1623080308
crr!cren@tilde.team
https://ttm.sh/FLQ.zig <- the source

1623080322
crr!cren@tilde.team
https://ttm.sh/FLE.txt <- the compile error

1623080506
crr!cren@tilde.team
oh I should mention that the error is upon running zig test

1623080645
z_is_stimky!~quassel@109.70.144.142
crr: you deinit the string when returning

1623080650
z_is_stimky!~quassel@109.70.144.142
so your just returning invalid memory

1623080660
crr!cren@tilde.team
z_is_stimky: ahh thanks

1623080672
z_is_stimky!~quassel@109.70.144.142
return allocator.dupe(bin_str.items)

1623080676
crr!cren@tilde.team
I wish the compiler would tell me that rather than just segfaulting

1623080681
z_is_stimky!~quassel@109.70.144.142
then free

1623080689
z_is_stimky!~quassel@109.70.144.142
allocator.free(thing)

1623080710
z_is_stimky!~quassel@109.70.144.142
testing allocator reports memory leaks which is nice

1623080749
z_is_stimky!~quassel@109.70.144.142
all tests ail when you dont free

1623080776
crr!cren@tilde.team
z_is_stimky: if I use `defer`, will that defer the free until after the return?

1623080798
crr!cren@tilde.team
z_is_stimky: yes, in a previous situation where I did not free, the test passed but also leaked memory

1623080905
z_is_stimky!~quassel@109.70.144.142
you can deer the ArrayList

1623080930
z_is_stimky!~quassel@109.70.144.142
just return the dupe'd string and then ree it in the tests in a deer 

1623080939
z_is_stimky!~quassel@109.70.144.142
free* defer*

1623081015
z_is_stimky!~quassel@109.70.144.142
https://zigbin.io/be8314

1623081017
z_is_stimky!~quassel@109.70.144.142
like this

1623081047
z_is_stimky!~quassel@109.70.144.142
oops, line75 should be dupe(bin_str.items)

1623081068
dutchie!~dutchie@user/dutchie
i'd just `errdefer bin_str.deinit()` and `return bin_str.toOwnedSlice();`

1623081089
z_is_stimky!~quassel@109.70.144.142
oh yeah that also works

1623081090
dutchie!~dutchie@user/dutchie
no need to dupe, copying is expensive

1623081100
z_is_stimky!~quassel@109.70.144.142
i always orget that toOwnedSlice exists

1623081108
z_is_stimky!~quassel@109.70.144.142
brb doing that in my codebase to

1623081111
z_is_stimky!~quassel@109.70.144.142
too

1623081113
dutchie!~dutchie@user/dutchie
also holy hell use a match not a billion if else if

1623081125
crr!cren@tilde.team
whoops I didn't realise that match statements were a thing

1623081138
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
match?

1623081138
dutchie!~dutchie@user/dutchie
:)

1623081149
crr!cren@tilde.team
good thing you didn't see my other program which had two of those super-long elseifs lol

1623081158
companion_cube!~simon@user/companion-cube
s/statement/expression  s/match/switch :-°

1623081166
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
is that a kiss companion_cube 

1623081172
companion_cube!~simon@user/companion-cube
that's my whistling

1623081174
dutchie!~dutchie@user/dutchie
yeah switch whatever

1623081177
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
:*

1623081179
ifreund!~ifreund@user/ifreund
Piraty: hare also doesn't have generics, which seems like a pretty massive missing feature to me

1623081179
companion_cube!~simon@user/companion-cube
which I can do on IRc but not IRL

1623081188
ifreund!~ifreund@user/ifreund
this means there is for example no hash table in the standard library

1623081190
dutchie!~dutchie@user/dutchie
ty companion_cube <3 u too

1623081192
companion_cube!~simon@user/companion-cube
ifreund: but s i m p l i c i t y

1623081204
ifreund!~ifreund@user/ifreund
and the suggested solution is "write your own for every use case you have"

1623081238
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ifreund c

1623081312
ifreund!~ifreund@user/ifreund
haze: C doesn't have generics yes, but it is supported everywhere already and extreemly widely used.

1623081318
ifreund!~ifreund@user/ifreund
hare doesn't have those 2 features

1623081323
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i meant that there isnt a hash map in the std lib

1623081332
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i want to write software not every single foundation n times

1623081400
marler8997!~marler899@204.229.3.4
test

1623081435
ikskuh!~xq@2a0d:5940:6:163::ad7e
ACK

1623081568
marler8997!~marler899@204.229.3.4
cool, zig-irc-publisher is automatically updating the logs now: https://marler8997.github.io/zig-irc-webpage/?date=2021-06-07

1623081588
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
valid

1623081631
luuk!~luuk@user/luuk
Nice work marler

1623081664
crr!cren@tilde.team
i always read "ACK" as an angry vocalisation before I remember it's a TCP thing

1623081700
companion_cube!~simon@user/companion-cube
very ncie

1623081726
marler8997!~marler899@204.229.3.4
funny, browser is caching the github log request though :) silly browsers

1623081726
z_is_stimky!~quassel@109.70.144.142
crr: i still even when writing tcp code

1623081758
marler8997!~marler899@204.229.3.4
every time you type a message now, the publisher will create a new git commit and push it to github...lol

1623081771
marler8997!~marler899@204.229.3.4
https://github.com/marler8997/zig-irc-logs/blob/live/2021/06-07.txt

1623081784
crr!cren@tilde.team
what's the difference between `defer` and `errdefer`?

1623081804
dutchie!~dutchie@user/dutchie
errdefer isn't triggered if your block exits normally

1623081819
dutchie!~dutchie@user/dutchie
(i.e. without returning the error side of an error union)

1623081887
companion_cube!~simon@user/companion-cube
marler8997: hope `git gc` will do its work :D

1623082033
marler8997!~marler899@204.229.3.4
actually no gc needed in this case, each commit goes on top of the last one, each day I think I'll squash all the commits from that day and then push them all as a single commit to the master branch

1623082046
marler8997!~marler899@204.229.3.4
I supposed after the squash is when the gc would come in

1623082064
companion_cube!~simon@user/companion-cube
yeah

1623082076
companion_cube!~simon@user/companion-cube
one commit per line would amount to a huge history otherwise

1623082084
marler8997!~marler899@204.229.3.4
haven't coded that part yet, publisher tool will detect when the day is over and just die for now, so we only get one day of logs atm :)

1623082107
companion_cube!~simon@user/companion-cube
a `git logrotate` in a way :p

1623082110
marler8997!~marler899@204.229.3.4
yeah, the overhead would probably take more room than the actual content

1623082961
crr!cren@tilde.team
this test is still leaking memory even using toOwnedSlice

1623084065
crr!cren@tilde.team
can anyone figure out why this is causing a memory leak?

1623084080
crr!cren@tilde.team
https://ttm.sh/FLd.txt <-- memory leak

1623084101
crr!cren@tilde.team
https://ttm.sh/FLh.zig <-- source

1623084160
luuk!~luuk@user/luuk
Don't think ArrayList(u1) works nicely. I think each element will end up being 1 byte, rather than a single bit. There's std.packed_int_array tho

1623084170
luuk!~luuk@user/luuk
My assumption is that's what's causing the leak

1623084413
ifreund!~ifreund@user/ifreund
crr: toOwnedSlice() returns owned memory that will not be free'd by deinit() on the ArrayList

1623084430
ifreund!~ifreund@user/ifreund
you need to free that slice separately

1623084438
crr!cren@tilde.team
you're probably right about the ArrayList(u1) not working nicely but why would that cause a memory leak?

1623084459
luuk!~luuk@user/luuk
Ah, did you link the actual code somewhere?

1623084470
luuk!~luuk@user/luuk
Oh you did, I'm blind

1623084501
luuk!~luuk@user/luuk
Yeah like ifreund mentioned, you're not freeing the memory returned by `hex_to_bin`

1623084551
crr!cren@tilde.team
I'm freeing that slice now in the test and that's fixed it

1623084567
crr!cren@tilde.team
but why is that necessary? I thought the point of toOwnedSlice() is that the ArrayList doesn't own the memory

1623084632
luuk!~luuk@user/luuk
Exactly, the caller owns the memory and therefore needs to free it

1623084644
crr!cren@tilde.team
oh, so is there such a thing as unowned memory?

1623084656
ifreund!~ifreund@user/ifreund
no?

1623084672
ifreund!~ifreund@user/ifreund
before you call toOwnedSlice() the memory is owned by the array list

1623084673
luuk!~luuk@user/luuk
There's always 'something' that owns the memory

1623084683
crr!cren@tilde.team
I assumed if the ArrayList didn't own the memory, it would be allocated and be freed automatically at the end of the test

1623084689
crr!cren@tilde.team
like a stack variable

1623084699
ifreund!~ifreund@user/ifreund
when you call it, the current contents of the array list are returned as an owned slice and the array list is reset to 0 len/capacity

1623084768
ifreund!~ifreund@user/ifreund
crr: the zig language/compiler knows nothing about ownership

1623084784
crr!cren@tilde.team
ohhh

1623084810
crr!cren@tilde.team
do the stack variables just not need freeing by virtue of being stack variables?

1623084818
ifreund!~ifreund@user/ifreund
ownership in this sense is just a useful concept for programmers to think about when writing code using manual memory management

1623084860
ifreund!~ifreund@user/ifreund
crr: you don't allocate stack variables using an allocator, therefore you don't free them using an allocator either

1623084873
ifreund!~ifreund@user/ifreund
the compiler is the one responsible for managing their lifetimes

1623084908
crr!cren@tilde.team
right

1623084939
crr!cren@tilde.team
so the reason I still have to free the owned slice is because it was originally allocated by an allocator, basically?

1623084975
ifreund!~ifreund@user/ifreund
yes, the memory pointed to by the slice is not on the stack

1623084993
ifreund!~ifreund@user/ifreund
it was provided by the testing_allocator

1623085079
crr!cren@tilde.team
yeah

1623085720
crr!cren@tilde.team
thanks for explaining that

1623085838
ifreund!~ifreund@user/ifreund
no problem!

1623089562
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
https://www.reddit.com/r/Zig/comments/cf7ggv/is_there_an_example_windows_message_box_hello/eu92qk2/?utm_source=reddit&utm_medium=web2x&context=3 What would I need to do to make this hell world example compile on Zig today?

1623089583
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(Or "what's Windows API best practices? Import what you need manually?)

1623089624
ifreund!~ifreund@user/ifreund
there's a zig showtime episode discussing windows api bindings and demonstrating that among other things in zig

1623089669
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
https://www.youtube.com/watch?v=HsnWZxrf5VE This one?

1623089747
ifreund!~ifreund@user/ifreund
yep, that's the one

1623092110
andrewrk!~andrewrk@mail.ziglang.org
it's nice to see stuff like https://github.com/ziglang/zig/pull/9030 being massively simpler to implement with the SSA in tree form than how it is in stage1

1623095601
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: if you have a chance, could you look at https://github.com/ziglang/zig/pull/8921 ? I think I implemented the language correctly, but im not 100% sure. (the test you suggested works)

1623095614
andrewrk!~andrewrk@mail.ziglang.org
sure

1623095626
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks

1623098060
marler8997!~marler899@204.229.3.4
g-w1, I'm curious why you disliked proposal 9000?

1623098165
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
imo, builtins should be as normal as possble. normal zig functions can't tell the difference if something is run at comptime or not, so why should a builtin. also what is the use case for it?

1623098177
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
this is also why I don't like cImport

1623098213
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i am thinking of making a proposal that just defines one cInclude(comptime str: []const u8) and takes c code and returns zig code

1623098214
marler8997!~marler899@204.229.3.4
use case was to implement my epoch logic here: https://github.com/marler8997/zig-irc-logger/blob/master/epoch.zig

1623098266
marler8997!~marler899@204.229.3.4
I think alot of builtins need to be able to take comptime and runtime parameters, not sure though

1623098296
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sure, but a language difference on them on the return type seems a bit much

1623098309
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think your solution is good, not sure it needs to be a language feature

1623098414
marler8997!~marler899@204.229.3.4
not sure if the language implementation could ever be as efficient as a builtin, since I'm not sure the compiler can derive the same amount of information from it

1623098481
marler8997!~marler899@204.229.3.4
but you're saying that return types shouldn't be based on input parameters?

1623098514
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
how would you define the return type of @mod?

1623098519
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
with your proposal

1623098525
marler8997!~marler899@204.229.3.4
UintFromMax(denom-1)

1623098557
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sure, but what if the arg is runtime?

1623098562
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
there is no zig code to define it

1623098570
marler8997!~marler899@204.229.3.4
then @TypeOf(denom)

1623098616
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, now how do you compose them? you can't in zig code. if zig gets a way to tell if something is comptime then sure

1623098638
qeeg__!~bruh@068-185-202-052.res.spectrum.com
hey, how do i run the compiler testsuite on stage2? all i'm getting are internal compiler errors when i try...

1623098646
marler8997!~marler899@204.229.3.4
right that's why I proposed it be a builtin, since you can't really do that in Zig code

1623098650
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
zig build test-stage2 -Denable-qemu

1623098663
marler8997!~marler899@204.229.3.4
well, you actually *can*, but it's kinda hacky :)

1623098674
qeeg__!~bruh@068-185-202-052.res.spectrum.com
still ICE

1623098685
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
pls show the error, that does not help

1623098710
qeeg__!~bruh@068-185-202-052.res.spectrum.com
it's kinda long so gimme a sec :p

1623098719
qeeg__!~bruh@068-185-202-052.res.spectrum.com
https://pastebin.com/BF2XVtP8

1623098773
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
did you modify any code in the test cases? that looks aufully sus to what happens when you want to use some stdlib stuff

1623098786
qeeg!~bruh@068-185-202-052.res.spectrum.com
nope

1623098794
qeeg!~bruh@068-185-202-052.res.spectrum.com
didn't modify a damn thing

1623098811
qeeg!~bruh@068-185-202-052.res.spectrum.com
just built it on arch linux, built stage2, then tried to run the testsuite

1623098849
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh!

1623098857
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you are using the wrong compiler

1623098875
qeeg!~bruh@068-185-202-052.res.spectrum.com
?

1623098885
qeeg!~bruh@068-185-202-052.res.spectrum.com
what do you mean?

1623098885
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
stage2 is not capable of compiling stage2 yet

1623098896
qeeg!~bruh@068-185-202-052.res.spectrum.com
no i'm not trying to build stage2 with stage2

1623098902
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes you are.

1623098903
qeeg!~bruh@068-185-202-052.res.spectrum.com
i'm trying to run the testsuite with stage2 >.>

1623098905
qeeg!~bruh@068-185-202-052.res.spectrum.com
no i'm not lol

1623098909
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
same thing

1623098911
qeeg!~bruh@068-185-202-052.res.spectrum.com
how

1623098920
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
stage2 cannot compile the stage2 test suide

1623098924
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
*suite

1623098945
qeeg!~bruh@068-185-202-052.res.spectrum.com
...wow lol

1623098945
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
which includes most of stage2 except main

1623098948
qeeg!~bruh@068-185-202-052.res.spectrum.com
OH

1623098950
qeeg!~bruh@068-185-202-052.res.spectrum.com
LMAO

1623098956
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
;D

1623098973
qeeg!~bruh@068-185-202-052.res.spectrum.com
i just wanted to do some testing of the stage2 compiler and see if i could find any bugs that i could fix :p

1623098996
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thats ok! just use stage1, not stage2

1623099005
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you don't need to build stage2 to do it

1623099014
marler8997!~marler899@204.229.3.4
g-w1, he's asking how to test stage 2 though..?

1623099017
qeeg!~bruh@068-185-202-052.res.spectrum.com
*she

1623099021
marler8997!~marler899@204.229.3.4
oh!

1623099031
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes, run zig build test-stage2 -Denable-qemu

1623099040
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
where zig is regular zig

1623099041
qeeg!~bruh@068-185-202-052.res.spectrum.com
what does the -Denable-qemu do?

1623099060
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
enables qemu. on arch most tests will not run due to a target bug without qemu

1623099066
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if you don't have qemu you can take it off

1623099076
qeeg!~bruh@068-185-202-052.res.spectrum.com
o.o weird

1623099095
qeeg!~bruh@068-185-202-052.res.spectrum.com
yeah, it said only 41 tests ran...

1623099099
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that is right

1623099110
marler8997!~marler899@204.229.3.4
win32metadata released a new update yesterday, a month after the last one! let's see how many things have broken

1623099129
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
there are 41 tests, each test case is not its own test, but in the test "self-hosted"

1623099191
qeeg!~bruh@068-185-202-052.res.spectrum.com
...weird, all tests passed yet stage2 can't compile itself?

1623099196
qeeg!~bruh@068-185-202-052.res.spectrum.com
what's the holdup there?

1623099212
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
uhh, the bug that you ran into

1623099231
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the only tests that are made are the ones that passes

1623099328
qeeg!~bruh@068-185-202-052.res.spectrum.com
oof

1623099331
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it runs in test/stage2/test.zig, not the behavior tests

1623099341
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so to add more tests, edit that file

1623099581
qeeg!~bruh@068-185-202-052.res.spectrum.com
yeah but like, what's causing the bug i'm running into?

1623099586
qeeg!~bruh@068-185-202-052.res.spectrum.com
is that known or?

1623099602
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the assert failed

1623099617
qeeg!~bruh@068-185-202-052.res.spectrum.com
yeah but

1623099622
qeeg!~bruh@068-185-202-052.res.spectrum.com
what causes it to fail? lol

1623099635
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
a bug in the compiler

1623099644
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
right now, stage2 is being worked on for feature completion

1623099658
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i HIGHLY suspect that once more features are added, that bug will go away

1623099667
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its probabaly a giant waste of time to track that down

1623099830
qeeg!~bruh@068-185-202-052.res.spectrum.com
well, what features does stage2 not have? is this listed anywhere?

1623099839
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in the tests

1623099857
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
most things that are not tested it does not have.

1623099869
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and in TODOs

1623099871
marler8997!~marler899@204.229.3.4
omg, I only had to fix 1 error! hallelujah

1623099945
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does find . -name "*.zig" | xargs zig ast-check work on all the generate files

1623100149
marler8997!~marler899@204.229.3.4
did zig remove ContainerDocComments or something?

1623100159
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
probably

1623100183
earnestly!~earnest@user/earnestly
ACTION .oO(-exec zig ast-check {} +)

1623100201
marler8997!~marler899@204.229.3.4
looks like it's still in zig docs

1623100269
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
can you show an example file?

1623100308
marler8997!~marler899@204.229.3.4
https://gist.github.com/marler8997/3cbb981d851206dd8f8de19a9c4d788d

1623100334
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and what fails?

1623100356
marler8997!~marler899@204.229.3.4
oh hold on, it's not the top file

1623100362
marler8997!~marler899@204.229.3.4
it's another comment later on

1623100365
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i see

1623101433
marler8997!~marler899@204.229.3.4
zigwin32 release done

1623101835
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
oh cool, now I can use it and _maybe_ just MAYBE I'll actually get my first real Zig program done :D!

1623101848
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
ACTION has had... a few false starts this past month

1623101937
marler8997!~marler899@204.229.3.4
let me know if you find any issues

1623103063
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
marler8997: Will do. I'm still watching your presentation

1623103291
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
>Unadorned Zig pointers cannot be null

1623103291
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I uh... forgot this ._.

1623103299
marler8997!~marler899@204.229.3.4
cool, the first half is mostly story time, if you want to skip to the demo about half way that's probably the most useful info

1623103308
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
But that would explain ?LPSTR etc

1623103329
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
zig also has allowzero

1623105977
moog!~moog@107.126.48.102
I'm trying to pass a `std.io.getStdIn().reader()` const to a function but I'm receiving: error: container 'std.io' has no member called 'reader'

1623105984
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
marler8997: Does zigwin32gen play nice w/ gyro?

1623105986
moog!~moog@107.126.48.102
But if I print the type of it, it comes back as: td.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)

1623105990
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
oops

1623106091
moog!~moog@107.126.48.102
And the func sig: `fn test(reader: *std.io.reader.Reader) !void {`

1623106877
marler8997!~marler899@204.229.3.4
cr1901, I haven't done anything with gyro, if there's something easy I can do maybe we can add something

1623107304
kacho!~kacho@user/kacho
moog, reader and writer interfaces are taken by functions with anytype.

1623107355
kacho!~kacho@user/kacho
so you would do `fn test(reader: anytype) !void`.

1623108362
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
marler8997: Ack, I'm not sure if integration will be seamless, thinking offhand, since zigwin32gen seems to want the json in a deps/ dir at the root of your source dir

1623108378
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
But that's fine, doesn't have to be perfect

1623108900
moog!~moog@107.126.48.102
Thanks kacho!

1623108976
marler8997!~marler899@204.229.3.4
ct1901, I'm surprised you're generating the sources yourself.  I would expect most people to just use the generated files at zigwin32

1623109003
marler8997!~marler899@204.229.3.4
^ cr1901 (mispelled)

1623109046
marler8997!~marler899@204.229.3.4
zigwin32gen doesn't have any zig dependencies, only the dependency on the JSON files

1623109531
kacho!~kacho@user/kacho
moog, no problem :D

1623110048
marler8997!~marler899@204.229.3.4
why does Zig need libc to cross-compile hello.zig?

1623110058
marler8997!~marler899@204.229.3.4
for freebsd

1623110067
marler8997!~marler899@204.229.3.4
is libc the freebsd kernel interface?

1623110370
andrewrk!~andrewrk@mail.ziglang.org
yes

